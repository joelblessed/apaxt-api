{
    "sourceFile": "jsFiles/products.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1745178488028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745178512328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const { query } = require('./db'); // Import the PostgreSQL connection\n+const { query } = require('.//db'); // Import the PostgreSQL connection\n \n // Get all products (with pagination)\n router.get('/products', async (req, res) => {\n   const page = parseInt(req.query.page) || 1;\n"
                },
                {
                    "date": 1745178524394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const { query } = require('.//db'); // Import the PostgreSQL connection\n+const { query } = require('.'); // Import the PostgreSQL connection\n \n // Get all products (with pagination)\n router.get('/products', async (req, res) => {\n   const page = parseInt(req.query.page) || 1;\n"
                },
                {
                    "date": 1745178674820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const { query } = require('.'); // Import the PostgreSQL connection\n+const { query } = require('./db'); // Import the PostgreSQL connection\n \n // Get all products (with pagination)\n router.get('/products', async (req, res) => {\n   const page = parseInt(req.query.page) || 1;\n@@ -63,5 +63,6 @@\n   } catch (err) {\n     console.error(err);\n     res.status(500).send('Server error');\n   }\n-});\n\\ No newline at end of file\n+});\n+\n"
                },
                {
                    "date": 1745178680571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,4 +65,100 @@\n     res.status(500).send('Server error');\n   }\n });\n \n+// Like a product\n+router.patch('/products/:id/like', async (req, res) => {\n+    const { userId, username } = req.body;\n+  \n+    try {\n+      // Check if user already liked\n+      const checkLike = await query(\n+        'SELECT 1 FROM product_likes WHERE product_id = $1 AND user_id = $2',\n+        [req.params.id, userId]\n+      );\n+  \n+      if (checkLike.rows.length > 0) {\n+        return res.status(400).json({ message: 'Already liked' });\n+      }\n+  \n+      // Transaction for data consistency\n+      await query('BEGIN');\n+      \n+      // Update likes count\n+      await query(\n+        'UPDATE products SET likes = likes + 1 WHERE id = $1',\n+        [req.params.id]\n+      );\n+      \n+      // Record the like\n+      await query(\n+        'INSERT INTO product_likes (product_id, user_id, username) VALUES ($1, $2, $3)',\n+        [req.params.id, userId, username]\n+      );\n+      \n+      await query('COMMIT');\n+      \n+      // Get updated like count\n+      const { rows } = await query(\n+        'SELECT likes FROM products WHERE id = $1',\n+        [req.params.id]\n+      );\n+      \n+      res.json({ \n+        message: 'Liked', \n+        likes: rows[0].likes \n+      });\n+    } catch (err) {\n+      await query('ROLLBACK');\n+      console.error(err);\n+      res.status(500).send('Server error');\n+    }\n+  });\n+  \n+  // Dislike a product\n+  router.patch('/products/:id/dislike', async (req, res) => {\n+    const { userId } = req.body;\n+  \n+    try {\n+      // Check if user actually liked\n+      const checkLike = await query(\n+        'SELECT 1 FROM product_likes WHERE product_id = $1 AND user_id = $2',\n+        [req.params.id, userId]\n+      );\n+  \n+      if (checkLike.rows.length === 0) {\n+        return res.status(400).json({ message: 'Not previously liked' });\n+      }\n+  \n+      await query('BEGIN');\n+      \n+      // Update likes count\n+      await query(\n+        'UPDATE products SET likes = likes - 1 WHERE id = $1',\n+        [req.params.id]\n+      );\n+      \n+      // Remove the like record\n+      await query(\n+        'DELETE FROM product_likes WHERE product_id = $1 AND user_id = $2',\n+        [req.params.id, userId]\n+      );\n+      \n+      await query('COMMIT');\n+      \n+      // Get updated like count\n+      const { rows } = await query(\n+        'SELECT likes FROM products WHERE id = $1',\n+        [req.params.id]\n+      );\n+      \n+      res.json({ \n+        message: 'Disliked', \n+        likes: rows[0].likes \n+      });\n+    } catch (err) {\n+      await query('ROLLBACK');\n+      console.error(err);\n+      res.status(500).send('Server error');\n+    }\n+  });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745178796983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,5 +160,7 @@\n       await query('ROLLBACK');\n       console.error(err);\n       res.status(500).send('Server error');\n     }\n-  });\n\\ No newline at end of file\n+  });\n+\n+  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1745178822029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,5 +162,44 @@\n       res.status(500).send('Server error');\n     }\n   });\n \n-  \n\\ No newline at end of file\n+  \n+\n+  router.get('/search', async (req, res) => {\n+    const query = req.query.query?.toLowerCase().trim();\n+    const page = parseInt(req.query.page) || 1;\n+    const limit = parseInt(req.query.limit) || 10;\n+    const offset = (page - 1) * limit;\n+  \n+    if (!query) return res.json([]);\n+  \n+    try {\n+      // Full-text search with pagination\n+      const { rows } = await query(\n+        `SELECT * FROM products \n+         WHERE to_tsvector('english', name || ' ' || category || ' ' || brand) \n+         @@ to_tsquery('english', $1)\n+         ORDER BY id\n+         LIMIT $2 OFFSET $3`,\n+        [query.split(' ').join(' | '), limit, offset]\n+      );\n+  \n+      // Get total count for pagination\n+      const countResult = await query(\n+        `SELECT COUNT(*) FROM products \n+         WHERE to_tsvector('english', name || ' ' || category || ' ' || brand) \n+         @@ to_tsquery('english', $1)`,\n+        [query.split(' ').join(' | ')]\n+      );\n+  \n+      res.json({\n+        page,\n+        limit,\n+        totalResults: parseInt(countResult.rows[0].count),\n+        results: rows,\n+      });\n+    } catch (err) {\n+      console.error(err);\n+      res.status(500).send('Server error');\n+    }\n+  });\n\\ No newline at end of file\n"
                },
                {
                    "date": 1745178828636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,9 +162,9 @@\n       res.status(500).send('Server error');\n     }\n   });\n \n-  \n+//   search products\n \n   router.get('/search', async (req, res) => {\n     const query = req.query.query?.toLowerCase().trim();\n     const page = parseInt(req.query.page) || 1;\n"
                },
                {
                    "date": 1745179035000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,9 @@\n const { query } = require('./db'); // Import the PostgreSQL connection\n \n+\n+\n+\n // Get all products (with pagination)\n router.get('/products', async (req, res) => {\n   const page = parseInt(req.query.page) || 1;\n   const limit = parseInt(req.query.limit) || 50;\n"
                },
                {
                    "date": 1745179086005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,34 @@\n const { query } = require('./db'); // Import the PostgreSQL connection\n \n \n+-- Products table\n+CREATE TABLE products (\n+  id SERIAL PRIMARY KEY,\n+  name VARCHAR(100) NOT NULL,\n+  price DECIMAL(10,2) CHECK (price > 0),\n+  description TEXT,\n+  category VARCHAR(50),\n+  brand VARCHAR(50),\n+  owner_id INTEGER REFERENCES users(id),\n+  likes INTEGER DEFAULT 0,\n+  created_at TIMESTAMP DEFAULT NOW()\n+);\n \n+-- Product likes tracking\n+CREATE TABLE product_likes (\n+  id SERIAL PRIMARY KEY,\n+  product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,\n+  user_id INTEGER NOT NULL,\n+  username VARCHAR(100) NOT NULL,\n+  liked_at TIMESTAMP DEFAULT NOW(),\n+  UNIQUE (product_id, user_id)\n+);\n \n+-- Create indexes for performance\n+CREATE INDEX idx_products_search ON products USING GIN(to_tsvector('english', name || ' ' || category || ' ' || brand));\n+CREATE INDEX idx_product_likes ON product_likes(product_id, user_id);\n+\n // Get all products (with pagination)\n router.get('/products', async (req, res) => {\n   const page = parseInt(req.query.page) || 1;\n   const limit = parseInt(req.query.limit) || 50;\n"
                },
                {
                    "date": 1745179098436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   likes INTEGER DEFAULT 0,\n   created_at TIMESTAMP DEFAULT NOW()\n );\n \n--- Product likes tracking\n+// -- Product likes tracking\n CREATE TABLE product_likes (\n   id SERIAL PRIMARY KEY,\n   product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,\n   user_id INTEGER NOT NULL,\n@@ -23,9 +23,9 @@\n   liked_at TIMESTAMP DEFAULT NOW(),\n   UNIQUE (product_id, user_id)\n );\n \n--- Create indexes for performance\n+// -- Create indexes for performance\n CREATE INDEX idx_products_search ON products USING GIN(to_tsvector('english', name || ' ' || category || ' ' || brand));\n CREATE INDEX idx_product_likes ON product_likes(product_id, user_id);\n \n // Get all products (with pagination)\n"
                },
                {
                    "date": 1745179104748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n const { query } = require('./db'); // Import the PostgreSQL connection\n \n \n--- Products table\n+// -- Products table\n CREATE TABLE products (\n   id SERIAL PRIMARY KEY,\n   name VARCHAR(100) NOT NULL,\n   price DECIMAL(10,2) CHECK (price > 0),\n"
                },
                {
                    "date": 1745179111034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,9 @@\n const { query } = require('./db'); // Import the PostgreSQL connection\n \n \n-// -- Products table\n-CREATE TABLE products (\n-  id SERIAL PRIMARY KEY,\n-  name VARCHAR(100) NOT NULL,\n-  price DECIMAL(10,2) CHECK (price > 0),\n-  description TEXT,\n-  category VARCHAR(50),\n-  brand VARCHAR(50),\n-  owner_id INTEGER REFERENCES users(id),\n-  likes INTEGER DEFAULT 0,\n-  created_at TIMESTAMP DEFAULT NOW()\n-);\n \n-// -- Product likes tracking\n-CREATE TABLE product_likes (\n-  id SERIAL PRIMARY KEY,\n-  product_id INTEGER REFERENCES products(id) ON DELETE CASCADE,\n-  user_id INTEGER NOT NULL,\n-  username VARCHAR(100) NOT NULL,\n-  liked_at TIMESTAMP DEFAULT NOW(),\n-  UNIQUE (product_id, user_id)\n-);\n \n-// -- Create indexes for performance\n-CREATE INDEX idx_products_search ON products USING GIN(to_tsvector('english', name || ' ' || category || ' ' || brand));\n-CREATE INDEX idx_product_likes ON product_likes(product_id, user_id);\n-\n // Get all products (with pagination)\n router.get('/products', async (req, res) => {\n   const page = parseInt(req.query.page) || 1;\n   const limit = parseInt(req.query.limit) || 50;\n"
                },
                {
                    "date": 1745181458598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const { query } = require('./db'); // Import the PostgreSQL connection\n+const { query } = require('../db'); // Import the PostgreSQL connection\n \n \n \n \n"
                },
                {
                    "date": 1745181487811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-const { query } = require('../db'); // Import the PostgreSQL connection\n+const { query } = require('./db'); // Import the PostgreSQL connection\n \n \n \n \n"
                }
            ],
            "date": 1745178488028,
            "name": "Commit-0",
            "content": "const { query } = require('./db'); // Import the PostgreSQL connection\n\n// Get all products (with pagination)\nrouter.get('/products', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 50;\n  const offset = (page - 1) * limit;\n\n  try {\n    const { rows } = await query(\n      'SELECT * FROM products ORDER BY id LIMIT $1 OFFSET $2',\n      [limit, offset]\n    );\n    res.json({ products: rows });\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n\n// Get single product by ID\nrouter.get('/products/:id', async (req, res) => {\n  try {\n    const { rows } = await query('SELECT * FROM products WHERE id = $1', [\n      req.params.id,\n    ]);\n    if (rows.length === 0) {\n      return res.status(404).json({ message: 'Product not found' });\n    }\n    res.json(rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n\n// Update product\nrouter.put('/updateProduct/:id', upload.array('images'), async (req, res) => {\n  const { name, price, description } = JSON.parse(req.body.product);\n  \n  try {\n    const { rows } = await query(\n      `UPDATE products \n       SET name = $1, price = $2, description = $3 \n       WHERE id = $4 \n       RETURNING *`,\n      [name, price, description, req.params.id]\n    );\n    \n    // Handle image updates if needed\n    res.json(rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n\n// Delete product\nrouter.delete('/deleteProduct/:id', async (req, res) => {\n  try {\n    await query('DELETE FROM products WHERE id = $1', [req.params.id]);\n    res.json({ message: 'Product deleted successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});"
        }
    ]
}